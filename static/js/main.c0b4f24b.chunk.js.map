{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/getComments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","onSelectedPost","className","map","post","userId","title","id","type","onClick","ENDPOINT","request","url","errorMsg","options","fetch","then","response","ok","Error","status","statusText","json","catch","Response","getPostComments","postId","deleteComment","commentId","method","addComment","name","email","body","headers","JSON","stringify","NewCommentForm","setIsLoading","updateComments","useState","setName","mail","setMail","message","setMessage","handleSubmit","event","a","preventDefault","console","warn","finally","onSubmit","placeholder","value","onChange","target","Loader","getComments","funcSetComments","funcSetLoader","PostDetails","isHide","setIsHide","comments","setComments","isLoading","valueBtn","useMemo","length","useEffect","removeComment","comment","App","setPosts","setUserId","selectedPostId","setSelectedPostId","setSelectedPost","getUserPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0b4f24b.chunk.js","sourcesContent":["import './PostsList.scss';\nimport { Post } from '../../types/Post';\n\ninterface Props {\n  posts: Post[];\n  selectedPost: number;\n  onSelectedPost: (selectedPost: number) => void;\n}\n\nexport const PostsList = ({ posts, selectedPost, onSelectedPost }: Props) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            {selectedPost === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onSelectedPost(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onSelectedPost(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\nexport const ENDPOINT = {\n  posts: '/posts',\n  comments: '/comments',\n};\n\n// eslint-disable-next-line max-len\nexport const request = (url: string, errorMsg: string, options?: {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .catch(() => ({\n      Response: 'False',\n      Error: `${errorMsg}`,\n    }));\n};\n","import { Comment } from '../types/Comment';\nimport { ResponseError } from '../types/ResponseError';\nimport { request, ENDPOINT } from './api';\n\n// eslint-disable-next-line max-len\nexport const getPostComments = (postId: number): Promise<Comment[] | ResponseError> => {\n  return request(`${ENDPOINT.comments}?postId=${postId}`, 'Comments is not load');\n};\n\n// eslint-disable-next-line max-len\nexport const deleteComment = (commentId: number): Promise<Comment[] | ResponseError> => {\n  return request(`${ENDPOINT.comments}/${commentId}`, 'Comment did not find', { method: 'DELETE' });\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment[]> => {\n  return request(ENDPOINT.comments, 'Comment did not add', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import {\n  Dispatch, FormEvent, SetStateAction, useState,\n} from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../types/Comment';\nimport { addComment, getPostComments } from '../../api/comments';\n// import { getComments } from '../PostDetails/getComments';\n\ninterface Props {\n  postId: number;\n  setIsLoading: (isLoading: boolean) => void;\n  updateComments: Dispatch<SetStateAction<Comment[]>>;\n}\n\nexport const NewCommentForm = (\n  { postId, setIsLoading, updateComments }: Props,\n) => {\n  const [name, setName] = useState('');\n  const [mail, setMail] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    await addComment(postId, name, mail, message);\n\n    getPostComments(postId).then(response => {\n      if ('Error' in response) {\n        console.warn(response.Error); // eslint-disable-line\n      } else {\n        updateComments(response);\n      }\n    }).finally(() => setIsLoading(false));\n\n    setName('');\n    setMail('');\n    setMessage('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={mail}\n          onChange={({ target }) => setMail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={message}\n          onChange={({ target }) => setMessage(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { getPostComments } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\n\nexport function getComments(\n  postId: number,\n  funcSetComments: (comments: Comment[]) => void,\n  funcSetLoader: (value: boolean) => void,\n) {\n  getPostComments(postId).then(response => {\n    if ('Error' in response) {\n      console.warn(response.Error); // eslint-disable-line\n    } else {\n      funcSetComments(response);\n    }\n  }).finally(() => funcSetLoader(false));\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { deleteComment } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport { getComments } from './getComments';\n\ninterface Props {\n  post: Post;\n  postId: number;\n}\n\nexport const PostDetails = ({ post, postId }: Props) => {\n  const [isHide, setIsHide] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const valueBtn = useMemo(() => {\n    const value = `${comments.length} comment${comments.length > 1 ? 's' : ''}`;\n\n    if (isHide) {\n      return `Show ${value}`;\n    }\n\n    return `Hide ${value}`;\n  }, [isHide, comments]);\n\n  useEffect(() => {\n    getComments(postId, setComments, setIsLoading);\n  }, [postId]);\n\n  const removeComment = async (commentId: number) => {\n    setIsLoading(true);\n\n    await deleteComment(commentId);\n\n    getComments(postId, setComments, setIsLoading);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <section className=\"PostDetails__comments\">\n          {!isHide ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsHide(true)}\n            >\n              {valueBtn}\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsHide(false)}\n            >\n              {valueBtn}\n            </button>\n          )}\n\n          {!isHide && (\n            <ul className=\"PostDetails__list\" data-cy=\"postList\">\n              {comments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            setIsLoading={setIsLoading}\n            updateComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { getPostDetails, getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUserPosts(userId).then(response => {\n      if ('Error' in response) {\n        console.warn(response.Error); // eslint-disable-line\n      } else {\n        setPosts(response);\n      }\n    });\n  }, [userId]);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId).then(response => {\n      if ('Error' in response) {\n        console.warn(response.Error); // eslint-disable-line\n      } else {\n        setSelectedPost(response);\n      }\n    });\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={({ target }) => setUserId(+target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPost={selectedPostId}\n            onSelectedPost={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails post={selectedPost} postId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { Post } from '../types/Post';\nimport { ResponseError } from '../types/ResponseError';\nimport { request, ENDPOINT } from './api';\n\n// eslint-disable-next-line max-len\nexport const getUserPosts = (userId = 0): Promise<Post[] | ResponseError> => {\n  const url = userId === 0\n    ? `${ENDPOINT.posts}`\n    : `${ENDPOINT.posts}?userId=${userId}`;\n\n  return request(url, 'Posts is not load');\n};\n\n// eslint-disable-next-line max-len\nexport const getPostDetails = (postId: number): Promise<Post | ResponseError> => {\n  return request(`${ENDPOINT.posts}/${postId}`, 'Post did not find');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}